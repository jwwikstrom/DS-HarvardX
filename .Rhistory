#
#                                                              B_u_hat <- edx %>%
#                                                                filter(K_fold != k) %>%
#                                                                left_join(B_m_hat, by = 'movieId') %>%
#                                                                group_by(userId) %>%
#                                                                summarize(b_j_hat = sum(rating - mu_hat - b_i_hat)/(n()+l_u))
#
#
#                                                              predicted_ratings <- edx %>%
#                                                                filter(K_fold == k) %>%
#                                                                left_join(B_m_hat, by = 'movieId') %>%
#                                                                left_join(B_u_hat, by = 'userId') %>%
#                                                                mutate(pred_rating = mu_hat + b_i_hat + b_j_hat) %>%
#                                                                .$pred_rating
#
#                                                              # predicted_ratings[predicted_ratings>5] <- 5
#                                                              # predicted_ratings[predicted_ratings<0.5] <- 0.5
#                                                              RMSE(predicted_ratings,edx %>% filter(K_fold == k) %>% .$rating)
#
#                                                            }))
#                                       })
#                  })
#
# lambda_m <- lambdas_m[which(rmses==min(rmses), arr.ind = TRUE)[2]]
# lambda_u <- lambdas_u[which(rmses==min(rmses), arr.ind = TRUE)[1]]
lambda_m <- 5
lambda_u <- 5
# Estimate using entire edx set
# Movie bias
B_m_hat <- edx %>%
group_by(movieId) %>%
summarize(b_i_hat = sum(rating-mu_hat)/(n()+lambda_m))
# User bias
B_u_hat <- edx %>%
left_join(B_m_hat, by = 'movieId') %>%
group_by(userId) %>%
summarize(b_j_hat = sum(rating - mu_hat - b_i_hat)/(n()+lambda_u))
# Predict on edx set
predicted_ratings <- edx %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat) %>%
.$pred_rating
# predicted_ratings[predicted_ratings>5] <- 5
# predicted_ratings[predicted_ratings<0.5] <- 0.5
# predicted_validation <- validation %>%
#   left_join(B_m_hat, by = 'movieId') %>%
#   left_join(B_u_hat, by = 'userId') %>%
#   mutate(pred_rating = mu_hat + b_i_hat + b_j_hat) %>%
#   .$pred_rating
#
# predicted_validation[predicted_validation>5] <- 5
# predicted_validation[predicted_validation<0.5] <- 0.5
#
# RMSE(validation$rating , predicted_validation)
#
# RMSE(edx$rating,predicted_ratings)
# Spread edx into matrix y, of residuals res, with users as rows and movies as coloumns
y <- edx %>%
mutate(res = rating - predicted_ratings) %>%
group_by(movieId) %>%
filter(n()>200) %>%
ungroup() %>%
group_by(userId) %>%
filter(n()>400) %>%
ungroup() %>%
select(userId,movieId,res) %>%
spread(movieId,res) %>%
as.matrix()
# Convert first coloumn to rownames (first coloumn is userId)
rownames(y) <- y[,1]
y <- y[,-1]
# Perform matrix factorization to find U and V that estimates filled y
y_svd <- funkSVD(y, verbose = TRUE, k=5, max_epochs = 300)
#
r <- y_svd$U %*% t(y_svd$V)
rownames(r) <- rownames(y)
colnames(r) <- colnames(y)
test_svd <- melt(r, value.name = "r_svd", varnames = c("userId","movieId"))
svd_prediction <- validation %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(test_svd, by = c("userId", "movieId")) %>%
replace_na(list(r_svd = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r_svd) %>%
.$pred_rating
RMSE(validation$rating,svd_prediction)
save(svd_prediction, file = "predictions")
save(svd_prediction, file = "predictions.RData")
save.image("~/R data/svd_prediction.RData")
load("C:/Users/jwikstro/Downloads/svd.RData")
svd_prediction <- validation %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId')
head(svd_prediction)
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId')
head(svd_prediction)
#
R_hat <- Y_svd$U %*% t(Y_svd$V)
#
R_hat <- y_svd$U %*% t(y_svd$V)
y <- melt(y, value.name = "r", varnames = c("userId","movieId"))
y <- melt(head(y), value.name = "r", varnames = c("userId","movieId"))
R_svd <- y_svd
rm(y_svd)
View(R_svd)
# Create R_hat from U and V
R_hat <- R_svd$U[1:1000,] %*% t(R_svd$V[1:1000,])
# Melt to structured format
R_hat <- melt(R_hat, value.name = "r", varnames = c("userId","movieId"))
head(R_hat)
head(R_hat,1001)
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
.$pred_rating
# Create R_hat from U and V
R_hat <- R_svd$U[1:10000,] %*% t(R_svd$V[1:1000,])
# Melt to structured format
R_hat <- melt(R_hat, value.name = "r", varnames = c("userId","movieId"))
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
.$pred_rating
R_hat[1:2]
R_hat[1:2,1]
R_hat[1:2,1:2]
R_hat[,1]
R_hat[,1:2]
head(R_hat,100)
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(head(R_hat,length(R_hat)/2), by = c("userId", "movieId")) %>%
left_join(tail(R_hat,length(R_hat)/2), by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
.$pred_rating
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(head(R_hat,length(R_hat)/2), by = c("userId", "movieId"))
head(svd_prediction)
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(head(R_hat,length(R_hat)/2), by = c("userId", "movieId")) %>%
left_join(tail(R_hat,length(R_hat)/2), by = c("userId", "movieId"))
head(svd_prediction)
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
merge.data.frame(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
svd_prediction
svd_prediction_tmp <- svd_prediction
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
identical(svd_prediction,svd_prediction_tmp)
head(svd_prediction)
head(svd_prediction_tmp)
rm(svd_prediction_tmp)
# Remove stuff to free memory
rm(R,edx,R_svd)
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
merge.data.frame(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
# Create predictions using mu_hat, B_m_hat, B_u_hat, and R_hat
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
merge.default(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
tmp <- R_hat
tmp <- big.matrix(R_hat)
head(tmp)
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(tmp, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
head(svd_prediction)
View(tmp)
tmp <- as.big.matrix(R_hat)
head(tmp)
head(R_hat)
length((R_hat))
length(R_hat)
dim(R_hat)
dim(tmp)
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(tmp, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
svd_prediction <- head(validation,10000) %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(tmp, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
svd_prediction <- head(validation,10000) %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
svd_prediction <- head(validation) %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat, by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
length(R_hat)
size(R_hat)
NROW(R_hat)
NROW(R_hat)/2
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(head(R_hat,NROW(R_hat)/2), by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat + r) %>%
select(movieId,userId, pred_rating)
svd_prediction <- svd_prediction %>%
left_join(tail(R_hat,NROW(R_hat)/2), by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = pred_rating + r)
head(svd_prediction)
R_hat <- R_hat %>%
mutate(K_fold = createFolds(y = edx$r, k = 100, list = FALSE))
R_hat <- R_hat %>%
mutate(K_fold = createFolds(y = R_hat$r, k = 100, list = FALSE))
head(R_hat)
lapply(1:100, function(i){
svd_prediction <- svd_prediction %>%
left_join(R_hat %>% filter(K_fold == i) , by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = pred_rating + r)
})
R_hat
svd_prediction <- svd_prediction %>%
left_join(R_hat %>% filter(K_fold == i) , by = c("userId", "movieId"))
i <- 1
svd_prediction <- svd_prediction %>%
left_join(R_hat %>% filter(K_fold == i) , by = c("userId", "movieId"))
svd_prediction
head(svd_prediction)
svd_prediction <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat ) %>%
select(movieId,userId, pred_rating)
head(svd_prediction)
lapply(1:100, function(i){
svd_prediction <- svd_prediction %>%
left_join(R_hat %>% filter(K_fold == i) , by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = pred_rating + r) %>%
select(movieId,userId, pred_rating)
})
for (i in 1:100) {
svd_prediction <- svd_prediction %>%
left_join(R_hat %>% filter(K_fold == i) , by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = pred_rating + r) %>%
select(movieId,userId, pred_rating)
}
head(svd_prediction)
svd_prediction_2 <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat %>% filter(K_fold == i) , by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat +r) %>%
select(movieId,userId, pred_rating)
svd_prediction_2 <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat , by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat +r) %>%
select(movieId,userId, pred_rating)
svd_prediction_2 <- validation %>%
select(userId,movieId) %>%
left_join(B_m_hat, by = 'movieId') %>%
left_join(B_u_hat, by = 'userId') %>%
left_join(R_hat , by = c("userId", "movieId")) %>%
replace_na(list(r = 0)) %>%
mutate(pred_rating = mu_hat + b_i_hat + b_j_hat +r) %>%
select(movieId,userId, pred_rating)
head(svd_prediction)
head(svd_prediction_2)
identical(svd_prediction,svd_prediction_2)
rm(svd_prediction_2)
rm(svd_prediction)
load("~/R data/svd_prediction.RData")
svd_RMSE(validation$rating,svd_prediction$pred_rating)
RMSE(validation$rating,svd_prediction$pred_rating)
rm(tmp)
hist(svd_prediction)
hist(svd_prediction$pred_rating)
svd_prediction %>% filter(pred_rating >5) <- 5
svd_prediction$pred_rating[svd$predicted_validation>5]
svd_prediction$pred_rating[svd_prediction$pred_rating>5] <- 5
svd_prediction$pred_rating[svd_prediction$pred_rating>5]
svd_prediction$pred_rating[svd_prediction$pred_rating<0.5]
svd_prediction$pred_rating[svd_prediction$pred_rating<0.5] <- 0.5
RMSE(validation$rating,svd_prediction$pred_rating)
rm(y)
rm(predicted_ratings)
# Save predictions
save(svd_prediction, file = "predictions.RData")
max(svd_prediction$pred_rating)
min(svd_prediction$pred_rating)
load("~/R data/MovieLens_SVD.RData")
load("C:/Users/jwikstro/Downloads/svd.RData")
rm(list=ls())
load("~/R data/svd_prediction.RData")
hist(svd_prediction)
hist(svd_prediction$pred_rating)
# Calculate RMSE
RMSE(validation$rating,svd_prediction$pred_rating)
# Fit out of interval ratings into the interval [0.5, 5]
svd_prediction$pred_rating[svd_prediction$pred_rating>5] <- 5
svd_prediction$pred_rating[svd_prediction$pred_rating<0.5] <- 0.5
# Calculate RMSE
RMSE(validation$rating,svd_prediction$pred_rating)
rm(svd_prediction)
load("~/predictions.RData")
# Calculate RMSE
RMSE(validation$rating,svd_prediction$pred_rating)
rm(list=ls())
install.packages("data.table")
library(data.table)
dt <- data.table(arnr = c("1","2"), 2017 = c(0,1), 2018 = c(1,2))
?data.table
dt <- data.table("arnr" = c("1","2"), "2017" = c(0,1), "2018" = c(1,2))
st
dt
dr[,lappyl(.SD,sum),.SDcols = c("2017","2018")]
dt[,lappyl(.SD,sum),.SDcols = c("2017","2018")]
dt[,lapply(.SD,sum),.SDcols = c("2017","2018")]
dt[, sm := lapply(.SD,sum),.SDcols = c("2017","2018")]
dt
dt
dt <- data.table("arnr" = c("1","2"), "2017" = c(0,1), "2018" = c(1,2))
dt
dt[, sm := lapply(.SD,sum),.SDcols = c("2017","2018")]
dt
wd()
getwd()
rm(dt)
---
title: "Movielens Project Submission"
author: "Johan Wikström"
date: "8 februari 2019"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
---
title: "Movielens Project Submission"
author: "Johan Wikström"
date: "8 februari 2019"
output: pdf_document:
toc: TRUE
toc_depth: 2
df_print: kable
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
library("rmarkdown", lib.loc="~/R/win-library/3.5")
---
title: "Movielens Project Submission"
author: "Johan Wikström"
date: "8 februari 2019"
output: pdf_document:
toc: TRUE
toc_depth: 2
df_print: kable
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
library("knitr", lib.loc="~/R/win-library/3.5")
---
title: "Movielens Project Submission"
author: "Johan Wikström"
date: "8 februari 2019"
output: pdf_document:
toc: TRUE
toc_depth: 2
df_print: kable
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
getwd()
setwd("C:\Users\jwikstro\Documents\R Scripts\DS Harvard")
setwd("C:/Users/jwikstro/Documents/R Scripts/DS Harvard")
render("Movielens Project Submission.Rmd")
render("Movielens Project Submission.Rmd", output_format = "pdf_document")
render("Movielens Project Submission.Rmd", output_format = "pdf_document")
render("Movielens Project Submission.Rmd")
render("Movielens Project Submission.Rmd")
library("pdftools", lib.loc="~/R/win-library/3.5")
render("Movielens Project Submission.Rmd")
install.packages("latexpdf")
render("Movielens Project Submission.Rmd")
render("Movielens Project Submission.Rmd")
Sys.which('xelatex')
render("Movielens Project Submission.Rmd")
library("rmarkdown", lib.loc="~/R/win-library/3.5")
library("rmarkdown", lib.loc="~/R/win-library/3.5")
render("Movielens Project Submission.Rmd")
library("latexpdf", lib.loc="~/R/win-library/3.5")
library("tinytex", lib.loc="~/R/win-library/3.5")
render("Movielens Project Submission.Rmd")
Sys.which('xelatex')
library()
library(tinytex)
tinytex::install_tinytex()
